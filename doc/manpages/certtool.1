.TH certtool 1 "01 Jun 2013" "3.0.30" "User Commands"
.\"
.\"  DO NOT EDIT THIS FILE   (certtool-args.man)
.\"
.\"  It has been AutoGen-ed  June  1, 2013 at 01:07:09 PM by AutoGen 5.17.3
.\"  From the definitions    certtool-args.def.tmp
.\"  and the template file   agman-cmd.tpl
.\"
.SH NAME
certtool \- GnuTLS PKCS #11 tool
.SH SYNOPSIS
.B certtool
.\" Mixture of short (flag) options and long options
.RB [ \-\fIflag\fP " [\fIvalue\fP]]... [" \-\-\fIopt\-name\fP "[[=| ]\fIvalue\fP]]..."
.PP
All arguments must be options.
.PP
.SH "DESCRIPTION"
Tool to parse and generate X.509 certificates, requests and private keys.
It can be used interactively or non interactively by
specifying the template command line option.
.SH "OPTIONS"
.TP
.BR \-d " \fInumber\fP, " \-\-debug "=" \fInumber\fP
Enable debugging..
This option takes an integer number as its argument.
The value of \fInumber\fP is constrained to being:
.in +4
.nf
.na
in the range  0 through 9999
.fi
.in -4
.sp
Specifies the debug level.
.TP
.BR \-\-infile "=\fIfile\fP"
Input file.
.sp
.TP
.BR \-\-outfile "=\fIstring\fP"
Output file.
.sp
.TP
.BR \-s ", " \-\-generate\-self\-signed
Generate a self-signed certificate.
.sp
.TP
.BR \-c ", " \-\-generate\-certificate
Generate a signed certificate.
.sp
.TP
.BR \-\-generate\-proxy
Generates a proxy certificate.
.sp
.TP
.BR \-\-generate\-crl
Generate a CRL.
.sp
.TP
.BR \-u ", " \-\-update\-certificate
Update a signed certificate.
.sp
.TP
.BR \-p ", " \-\-generate\-privkey
Generate a private key.
.sp
.TP
.BR \-q ", " \-\-generate\-request
Generate a PKCS #10 certificate request.
.sp
.TP
.BR \-e ", " \-\-verify\-chain
Verify a PEM encoded certificate chain..
.sp
The last certificate in the chain must be a self signed one.
.TP
.BR \-\-verify
Verify a PEM encoded certificate chain using a trusted list..
This option must appear in combination with the following options:
load-ca-certificate.
.sp
The trusted certificate list must be loaded with \--load-ca-certificate.
.TP
.BR \-\-verify\-crl
Verify a CRL using a trusted list..
This option must appear in combination with the following options:
load-ca-certificate.
.sp
The trusted certificate list must be loaded with \--load-ca-certificate.
.TP
.BR \-\-generate\-dh\-params
Generate PKCS #3 encoded Diffie-Hellman parameters..
.sp
.TP
.BR \-\-get\-dh\-params
Get the included PKCS #3 encoded Diffie-Hellman parameters..
.sp
Returns stored DH parameters in GnuTLS. Those parameters are used in the SRP protocol. The parameters returned by fresh generation
are more efficient since GnuTLS 3.0.9.
.TP
.BR \-\-dh\-info
Print information PKCS #3 encoded Diffie-Hellman parameters.
.sp
.TP
.BR \-\-load\-privkey "=\fIstring\fP"
Loads a private key file.
.sp
This can be either a file or a PKCS #11 URL
.TP
.BR \-\-load\-pubkey "=\fIstring\fP"
Loads a public key file.
.sp
This can be either a file or a PKCS #11 URL
.TP
.BR \-\-load\-request "=\fIfile\fP"
Loads a certificate request file.
.sp
.TP
.BR \-\-load\-certificate "=\fIstring\fP"
Loads a certificate file.
.sp
This can be either a file or a PKCS #11 URL
.TP
.BR \-\-load\-ca\-privkey "=\fIstring\fP"
Loads the certificate authority's private key file.
.sp
This can be either a file or a PKCS #11 URL
.TP
.BR \-\-load\-ca\-certificate "=\fIstring\fP"
Loads the certificate authority's certificate file.
.sp
This can be either a file or a PKCS #11 URL
.TP
.BR \-\-password "=\fIstring\fP"
Password to use.
.sp
.TP
.BR \-i ", " \-\-certificate\-info
Print information on the given certificate.
.sp
.TP
.BR \-\-certificate\-pubkey
Print certificate's public key.
.sp
.TP
.BR \-\-pgp\-certificate\-info
Print information on the given OpenPGP certificate.
.sp
.TP
.BR \-\-pgp\-ring\-info
Print information on the given OpenPGP keyring structure.
.sp
.TP
.BR \-l ", " \-\-crl\-info
Print information on the given CRL structure.
.sp
.TP
.BR \-\-crq\-info
Print information on the given certificate request.
.sp
.TP
.BR \-\-no\-crq\-extensions
Do not use extensions in certificate requests.
.sp
.TP
.BR \-\-p12\-info
Print information on a PKCS #12 structure.
.sp
.TP
.BR \-\-p7\-info
Print information on a PKCS #7 structure.
.sp
.TP
.BR \-\-smime\-to\-p7
Convert S/MIME to PKCS #7 structure.
.sp
.TP
.BR \-k ", " \-\-key\-info
Print information on a private key.
.sp
.TP
.BR \-\-pgp\-key\-info
Print information on an OpenPGP private key.
.sp
.TP
.BR \-\-pubkey\-info
Print information on a public key.
.sp
.TP
.BR \-\-v1
Generate an X.509 version 1 certificate (with no extensions).
.sp
.TP
.BR \-\-to\-p12
Generate a PKCS #12 structure.
This option must appear in combination with the following options:
load-certificate.
.sp
It requires a certificate, a private key and possibly a CA certificate to be specified.
.TP
.BR \-\-to\-p8
Generate a PKCS #8 structure.
.sp
.TP
.BR \-8 ", " \-\-pkcs8
Use PKCS #8 format for private keys.
.sp
.TP
.BR \-\-rsa
Generate RSA key.
.sp
.TP
.BR \-\-dsa
Generate DSA key.
.sp
.TP
.BR \-\-ecc
Generate ECC (ECDSA) key.
.sp
.TP
.BR \-\-hash "=\fIstring\fP"
Hash algorithm to use for signing..
.sp
Available hash functions are SHA1, RMD160, SHA256, SHA384, SHA512.
.TP
.BR \-\-inder, " \fB\-\-no\-inder\fP"
Use DER format for input certificates and private keys..
The \fIno\-inder\fP form will disable the option.
.sp
The input files will be assumed to be in DER or RAW format. 
Unlike options that in PEM input would allow multiple input data (e.g. multiple 
certificates), when reading in DER format a single data structure is read.
.TP
.BR \-\-inraw
This is an alias for the \fI--inder\fR option.
.TP
.BR \-\-outder, " \fB\-\-no\-outder\fP"
Use DER format for output certificates and private keys.
The \fIno\-outder\fP form will disable the option.
.sp
The output will be in DER or RAW format.
.TP
.BR \-\-outraw
This is an alias for the \fI--outder\fR option.
.TP
.BR \-\-bits "=\fInumber\fP"
Specify the number of bits for key generate.
This option takes an integer number as its argument.
.sp
.TP
.BR \-\-sec\-param "=\fIsecurity parameter\fP"
Specify the security level [low, legacy, normal, high, ultra]..
.sp
This is alternative to the bits option.
.TP
.BR \-\-disable\-quick\-random
No effect.
.sp
.TP
.BR \-\-template "=\fIfile\fP"
Template file to use for non-interactive operation.
.sp
.TP
.BR \-\-pkcs\-cipher "=\fIcipher\fP"
Cipher to use for PKCS #8 and #12 operations.
.sp
Cipher may be one of 3des, 3des-pkcs12, aes-128, aes-192, aes-256, rc2-40, arcfour.
.TP
.BR \-h , " \-\-help"
Display usage information and exit.
.TP
.BR \-! , " \-\-more-help"
Pass the extended usage information through a pager.
.TP
.BR \-v " [{\fIv|c|n\fP}]," " \-\-version" "[=\fI{v|c|n}\fP]"
Output version of program and exit.  The default mode is `v', a simple
version.  The `c' mode will print copyright information and `n' will
print the full copyright notice.
.SH FILES
.br
\fBCerttool's template file format\fP
.br
A template file can be used to avoid the interactive questions of
certtool. Initially create a file named 'cert.cfg' that contains the information
about the certificate. The template can be used as below:
.sp
.br
.in +4
.nf
$ certtool \-\-generate\-certificate cert.pem \-\-load\-privkey key.pem  \
   \-\-template cert.cfg \
   \-\-load\-ca\-certificate ca\-cert.pem \-\-load\-ca\-privkey ca\-key.pem
.in -4
.fi
.sp
An example certtool template file that can be used to generate a certificate
request or a self signed certificate follows.
.sp
.br
.in +4
.nf
# X.509 Certificate options
#
# DN options
.sp
# The organization of the subject.
organization = "Koko inc."
.sp
# The organizational unit of the subject.
unit = "sleeping dept."
.sp
# The locality of the subject.
# locality =
.sp
# The state of the certificate owner.
state = "Attiki"
.sp
# The country of the subject. Two letter code.
country = GR
.sp
# The common name of the certificate owner.
cn = "Cindy Lauper"
.sp
# A user id of the certificate owner.
#uid = "clauper"
.sp
# Set domain components
#dc = "name"
#dc = "domain"
.sp
# If the supported DN OIDs are not adequate you can set
# any OID here.
# For example set the X.520 Title and the X.520 Pseudonym
# by using OID and string pairs.
#dn_oid = 2.5.4.12 Dr. 
#dn_oid = 2.5.4.65 jackal
.sp
# This is deprecated and should not be used in new
# certificates.
# pkcs9_email = "none@none.org"
.sp
# The serial number of the certificate
serial = 007
.sp
# In how many days, counting from today, this certificate will expire.
expiration_days = 700
.sp
# X.509 v3 extensions
.sp
# A dnsname in case of a WWW server.
#dns_name = "www.none.org"
#dns_name = "www.morethanone.org"
.sp
# A subject alternative name URI
#uri = "http://www.example.com"
.sp
# An IP address in case of a server.
#ip_address = "192.168.1.1"
.sp
# An email in case of a person
email = "none@none.org"
.sp
# Challenge password used in certificate requests
challenge_passwd = 123456
.sp
# An URL that has CRLs (certificate revocation lists)
# available. Needed in CA certificates.
#crl_dist_points = "http://www.getcrl.crl/getcrl/"
.sp
# Whether this is a CA certificate or not
#ca
.sp
# for microsoft smart card logon
# key_purpose_oid = 1.3.6.1.4.1.311.20.2.2
.sp
### Other predefined key purpose OIDs
.sp
# Whether this certificate will be used for a TLS client
#tls_www_client
.sp
# Whether this certificate will be used for a TLS server
#tls_www_server
.sp
# Whether this certificate will be used to sign data (needed
# in TLS DHE ciphersuites).
signing_key
.sp
# Whether this certificate will be used to encrypt data (needed
# in TLS RSA ciphersuites). Note that it is preferred to use different
# keys for encryption and signing.
#encryption_key
.sp
# Whether this key will be used to sign other certificates.
#cert_signing_key
.sp
# Whether this key will be used to sign CRLs.
#crl_signing_key
.sp
# Whether this key will be used to sign code.
#code_signing_key
.sp
# Whether this key will be used to sign OCSP data.
#ocsp_signing_key
.sp
# Whether this key will be used for time stamping.
#time_stamping_key
.sp
# Whether this key will be used for IPsec IKE operations.
#ipsec_ike_key
.sp
### end of key purpose OIDs
.sp
# When generating a certificate from a certificate
# request, then honor the extensions stored in the request
# and store them in the real certificate.
#honor_crq_extensions
.sp
# Path length contraint. Sets the maximum number of
# certificates that can be used to certify this certificate.
# (i.e. the certificate chain length)
#path_len = \-1
#path_len = 2
.sp
# OCSP URI
# ocsp_uri = http://my.ocsp.server/ocsp
.sp
# CA issuers URI
# ca_issuers_uri = http://my.ca.issuer
.sp
# Options for proxy certificates
# proxy_policy_language = 1.3.6.1.5.5.7.21.1
.sp
# Options for generating a CRL
.sp
# next CRL update will be in 43 days (wow)
#crl_next_update = 43
.sp
# this is the 5th CRL by this CA
#crl_number = 5
.sp
.in -4
.fi
.sp
.SH EXAMPLES
.br
\fBGenerating private keys\fP
.br
To create an RSA private key, run:
.br
.in +4
.nf
$ certtool \-\-generate\-privkey \-\-outfile key.pem \-\-rsa
.in -4
.fi
.sp
To create a DSA or elliptic curves (ECDSA) private key use the
above command combined with 'dsa' or 'ecc' options.
.sp
.br
\fBGenerating certificate requests\fP
.br
To create a certificate request (needed when the certificate is  issued  by
another party), run:
.br
.in +4
.nf
certtool \-\-generate\-request \-\-load\-privkey key.pem \
   \-\-outfile request.pem
.in -4
.fi
.sp
If the private key is stored in a smart card you can generate
a request by specifying the private key object URL.
.br
.in +4
.nf
$ ./certtool \-\-generate\-request \-\-load\-privkey "pkcs11:..." \
  \-\-load\-pubkey "pkcs11:..." \-\-outfile request.pem
.in -4
.fi
.sp
.sp
.br
\fBGenerating a self\-signed certificate\fP
.br
To create a self signed certificate, use the command:
.br
.in +4
.nf
$ certtool \-\-generate\-privkey \-\-outfile ca\-key.pem
$ certtool \-\-generate\-self\-signed \-\-load\-privkey ca\-key.pem \
   \-\-outfile ca\-cert.pem
.in -4
.fi
.sp
Note that a self\-signed certificate usually belongs to a certificate
authority, that signs other certificates.
.sp
.br
\fBGenerating a certificate\fP
.br
To generate a certificate using the previous request, use the command:
.br
.in +4
.nf
$ certtool \-\-generate\-certificate \-\-load\-request request.pem \
   \-\-outfile cert.pem \-\-load\-ca\-certificate ca\-cert.pem \
   \-\-load\-ca\-privkey ca\-key.pem
.in -4
.fi
.sp
To generate a certificate using the private key only, use the command:
.br
.in +4
.nf
$ certtool \-\-generate\-certificate \-\-load\-privkey key.pem \
   \-\-outfile cert.pem \-\-load\-ca\-certificate ca\-cert.pem \
   \-\-load\-ca\-privkey ca\-key.pem
.in -4
.fi
.sp
.br
\fBCertificate information\fP
.br
To view the certificate information, use:
.br
.in +4
.nf
$ certtool \-\-certificate\-info \-\-infile cert.pem
.in -4
.fi
.sp
.br
\fBPKCS #12 structure generation\fP
.br
To generate a PKCS #12 structure using the previous key and certificate,
use the command:
.br
.in +4
.nf
$ certtool \-\-load\-certificate cert.pem \-\-load\-privkey key.pem \
   \-\-to\-p12 \-\-outder \-\-outfile key.p12
.in -4
.fi
.sp
Some tools (reportedly web browsers) have problems with that file
because it does not contain the CA certificate for the certificate.
To work around that problem in the tool, you can use the
-\-load\-ca\-certificate parameter as follows:
.sp
.br
.in +4
.nf
$ certtool \-\-load\-ca\-certificate ca.pem \
  \-\-load\-certificate cert.pem \-\-load\-privkey key.pem \
  \-\-to\-p12 \-\-outder \-\-outfile key.p12
.in -4
.fi
.sp
.br
\fBDiffie\-Hellman parameter generation\fP
.br
To generate parameters for Diffie\-Hellman key exchange, use the command:
.br
.in +4
.nf
$ certtool \-\-generate\-dh\-params \-\-outfile dh.pem \-\-sec\-param normal
.in -4
.fi
.sp
.br
\fBProxy certificate generation\fP
.br
Proxy certificate can be used to delegate your credential to a
temporary, typically short\-lived, certificate.  To create one from the
previously created certificate, first create a temporary key and then
generate a proxy certificate for it, using the commands:
.sp
.br
.in +4
.nf
$ certtool \-\-generate\-privkey > proxy\-key.pem
$ certtool \-\-generate\-proxy \-\-load\-ca\-privkey key.pem \
  \-\-load\-privkey proxy\-key.pem \-\-load\-certificate cert.pem \
  \-\-outfile proxy\-cert.pem
.in -4
.fi
.sp
.br
\fBCertificate revocation list generation\fP
.br
To create an empty Certificate Revocation List (CRL) do:
.sp
.br
.in +4
.nf
$ certtool \-\-generate\-crl \-\-load\-ca\-privkey x509\-ca\-key.pem \
           \-\-load\-ca\-certificate x509\-ca.pem
.in -4
.fi
.sp
To create a CRL that contains some revoked certificates, place the
certificates in a file and use \fB\-\-load\-certificate\fP as follows:
.sp
.br
.in +4
.nf
$ certtool \-\-generate\-crl \-\-load\-ca\-privkey x509\-ca\-key.pem \
  \-\-load\-ca\-certificate x509\-ca.pem \-\-load\-certificate revoked\-certs.pem
.in -4
.fi
.sp
To verify a Certificate Revocation List (CRL) do:
.sp
.br
.in +4
.nf
$ certtool \-\-verify\-crl \-\-load\-ca\-certificate x509\-ca.pem < crl.pem
.in -4
.fi
.SH "EXIT STATUS"
One of the following exit values will be returned:
.TP
.BR 0 " (EXIT_SUCCESS)"
Successful program execution.
.TP
.BR 1 " (EXIT_FAILURE)"
The operation failed or the command syntax was not valid.
.TP
.BR 70 " (EX_SOFTWARE)"
libopts had an internal operational error.  Please report
it to autogen-users@lists.sourceforge.net.  Thank you.
.SH "SEE ALSO"
    p11tool (1)
.SH "AUTHORS"
Nikos Mavrogiannopoulos, Simon Josefsson and others; see /usr/share/doc/gnutls-bin/AUTHORS for a complete list.
.SH "COPYRIGHT"
Copyright (C) 2000-2012 Free Software Foundation all rights reserved.
This program is released under the terms of the GNU General Public License, version 3 or later.
.SH "BUGS"
Please send bug reports to: bug-gnutls@gnu.org
.SH "NOTES"
This manual page was \fIAutoGen\fP-erated from the \fBcerttool\fP
option definitions.
