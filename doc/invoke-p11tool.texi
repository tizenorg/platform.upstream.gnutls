@node p11tool Invocation
@subsection Invoking p11tool
@pindex p11tool
@ignore
#  -*- buffer-read-only: t -*- vi: set ro:
#
# DO NOT EDIT THIS FILE   (invoke-p11tool.texi)
#
# It has been AutoGen-ed  June 26, 2014 at 08:12:19 PM by AutoGen 5.18.2
# From the definitions    ../src/p11tool-args.def
# and the template file   agtexi-cmd.tpl
@end ignore


Program that allows operations on PKCS #11 smart cards
and security modules. 

To use PKCS #11 tokens with GnuTLS the p11-kit configuration files need to be setup.
That is create a .module file in /etc/pkcs11/modules with the contents 'module: /path/to/pkcs11.so'.
Alternatively the configuration file /etc/gnutls/pkcs11.conf has to exist and contain a number
of lines of the form 'load=/usr/lib/opensc-pkcs11.so'.

You can provide the PIN to be used for the PKCS #11 operations with the environment variable
GNUTLS_PIN.


This section was generated by @strong{AutoGen},
using the @code{agtexi-cmd} template and the option descriptions for the @code{p11tool} program.
This software is released under the GNU General Public License, version 3 or later.


@anchor{p11tool usage}
@subsubheading p11tool help/usage (@option{--help})
@cindex p11tool help

This is the automatically generated usage text for p11tool.

The text printed is the same whether selected with the @code{help} option
(@option{--help}) or the @code{more-help} option (@option{--more-help}).  @code{more-help} will print
the usage text by passing it through a pager program.
@code{more-help} is disabled on platforms without a working
@code{fork(2)} function.  The @code{PAGER} environment variable is
used to select the program, defaulting to @file{more}.  Both will exit
with a status code of 0.

@exampleindent 0
@example
p11tool - GnuTLS PKCS #11 tool
Usage:  p11tool [ -<flag> [<val>] | --<name>[@{=| @}<val>] ]... [url]

   -d, --debug=num            Enable debugging
                                - it must be in the range:
                                  0 to 9999
       --outfile=str          Output file
       --list-tokens          List all available tokens
       --export               Export the object specified by the URL
       --export-chain         Export the certificate specified by the URL and its chain of trust
       --list-mechanisms      List all available mechanisms in a token
       --list-all             List all available objects in a token
       --list-all-certs       List all available certificates in a token
       --list-certs           List all certificates that have an associated private key
       --list-all-privkeys    List all available private keys in a token
       --list-privkeys        an alias for the 'list-all-privkeys' option
       --list-keys            an alias for the 'list-all-privkeys' option
       --list-all-trusted     List all available certificates marked as trusted
       --initialize           Initializes a PKCS #11 token
       --write                Writes the loaded objects to a PKCS #11 token
       --delete               Deletes the objects matching the PKCS #11 URL
       --generate-random=num  Generate random data
       --generate-rsa         Generate an RSA private-public key pair
       --generate-dsa         Generate an RSA private-public key pair
       --generate-ecc         Generate an RSA private-public key pair
       --label=str            Sets a label for the write operation
       --trusted              Marks the object to be written as trusted
                                - disabled as '--no-trusted'
       --private              Marks the object to be written as private
                                - disabled as '--no-private'
                                - enabled by default
       --login                Force (user) login to token
                                - disabled as '--no-login'
       --so-login             Force security officer login to token
                                - disabled as '--no-so-login'
       --admin-login          an alias for the 'so-login' option
       --detailed-url         Print detailed URLs
                                - disabled as '--no-detailed-url'
       --secret-key=str       Provide a hex encoded secret key
       --load-privkey=file    Private key file to use
                                - file must pre-exist
       --load-pubkey=file     Public key file to use
                                - file must pre-exist
       --load-certificate=file Certificate file to use
                                - file must pre-exist
   -8, --pkcs8                Use PKCS #8 format for private keys
       --bits=num             Specify the number of bits for key generate
       --sec-param=str        Specify the security level
       --inder                Use DER/RAW format for input
                                - disabled as '--no-inder'
       --inraw                an alias for the 'inder' option
       --outder               Use DER format for output certificates, private keys, and DH parameters
                                - disabled as '--no-outder'
       --outraw               an alias for the 'outder' option
       --provider=file        Specify the PKCS #11 provider library
                                - file must pre-exist
   -v, --version[=arg]        output version information and exit
   -h, --help                 display extended usage information and exit
   -!, --more-help            extended usage information passed thru pager

Options are specified by doubled hyphens and their name or by a single
hyphen and the flag character.
Operands and options may be intermixed.  They will be reordered.

Program that allows handling data from PKCS #11 smart cards and security
modules.

To use PKCS #11 tokens with gnutls the configuration file
/etc/gnutls/pkcs11.conf has to exist and contain a number of lines of the
form 'load=/usr/lib/opensc-pkcs11.so'.  Alternatively the p11-kit
configuration files have to be setup.

To provide the PIN for all the operations below use the environment
variable GNUTLS_PIN.

@end example
@exampleindent 4

@anchor{p11tool debug}
@subsubheading debug option (-d)

This is the ``enable debugging'' option.
This option takes a number argument.
Specifies the debug level.
@anchor{p11tool export-chain}
@subsubheading export-chain option

This is the ``export the certificate specified by the url and its chain of trust'' option.
Exports the certificate specified by the URL and generates its chain of trust based on the stored certificates in the module.
@anchor{p11tool list-all-privkeys}
@subsubheading list-all-privkeys option

This is the ``list all available private keys in a token'' option.
Lists all the private keys in a token that match the specified URL.
@anchor{p11tool list-privkeys}
@subsubheading list-privkeys option

This is an alias for the @code{list-all-privkeys} option,
@pxref{p11tool list-all-privkeys, the list-all-privkeys option documentation}.

@anchor{p11tool list-keys}
@subsubheading list-keys option

This is an alias for the @code{list-all-privkeys} option,
@pxref{p11tool list-all-privkeys, the list-all-privkeys option documentation}.

@anchor{p11tool write}
@subsubheading write option

This is the ``writes the loaded objects to a pkcs #11 token'' option.
It can be used to write private keys, certificates or secret keys to a token.
@anchor{p11tool generate-random}
@subsubheading generate-random option

This is the ``generate random data'' option.
This option takes a number argument.
Asks the token to generate a number of bytes of random bytes.
@anchor{p11tool generate-rsa}
@subsubheading generate-rsa option

This is the ``generate an rsa private-public key pair'' option.
Generates an RSA private-public key pair on the specified token.
@anchor{p11tool generate-dsa}
@subsubheading generate-dsa option

This is the ``generate an rsa private-public key pair'' option.
Generates an RSA private-public key pair on the specified token.
@anchor{p11tool generate-ecc}
@subsubheading generate-ecc option

This is the ``generate an rsa private-public key pair'' option.
Generates an RSA private-public key pair on the specified token.
@anchor{p11tool private}
@subsubheading private option

This is the ``marks the object to be written as private'' option.

@noindent
This option has some usage constraints.  It:
@itemize @bullet
@item
can be disabled with --no-private.
@item
It is enabled by default.
@end itemize

The written object will require a PIN to be used.
@anchor{p11tool so-login}
@subsubheading so-login option

This is the ``force security officer login to token'' option.

@noindent
This option has some usage constraints.  It:
@itemize @bullet
@item
can be disabled with --no-so-login.
@end itemize

Forces login to the token as security officer (admin).
@anchor{p11tool admin-login}
@subsubheading admin-login option

This is an alias for the @code{so-login} option,
@pxref{p11tool so-login, the so-login option documentation}.

@anchor{p11tool sec-param}
@subsubheading sec-param option

This is the ``specify the security level'' option.
This option takes a string argument @file{Security parameter}.
This is alternative to the bits option. Available options are [low, legacy, medium, high, ultra].
@anchor{p11tool inder}
@subsubheading inder option

This is the ``use der/raw format for input'' option.

@noindent
This option has some usage constraints.  It:
@itemize @bullet
@item
can be disabled with --no-inder.
@end itemize

Use DER/RAW format for input certificates and private keys.
@anchor{p11tool inraw}
@subsubheading inraw option

This is an alias for the @code{inder} option,
@pxref{p11tool inder, the inder option documentation}.

@anchor{p11tool outder}
@subsubheading outder option

This is the ``use der format for output certificates, private keys, and dh parameters'' option.

@noindent
This option has some usage constraints.  It:
@itemize @bullet
@item
can be disabled with --no-outder.
@end itemize

The output will be in DER or RAW format.
@anchor{p11tool outraw}
@subsubheading outraw option

This is an alias for the @code{outder} option,
@pxref{p11tool outder, the outder option documentation}.

@anchor{p11tool provider}
@subsubheading provider option

This is the ``specify the pkcs #11 provider library'' option.
This option takes a file argument.
This will override the default options in /etc/gnutls/pkcs11.conf
@anchor{p11tool exit status}
@subsubheading p11tool exit status

One of the following exit values will be returned:
@table @samp
@item 0 (EXIT_SUCCESS)
Successful program execution.
@item 1 (EXIT_FAILURE)
The operation failed or the command syntax was not valid.
@end table
@anchor{p11tool See Also}
@subsubheading p11tool See Also
    certtool (1)
@anchor{p11tool Examples}
@subsubheading p11tool Examples
To view all tokens in your system use:
@example
$ p11tool --list-tokens
@end example

To view all objects in a token use:
@example
$ p11tool --login --list-all "pkcs11:TOKEN-URL"
@end example

To store a private key and a certificate in a token run:
@example
$ p11tool --login --write "pkcs11:URL" --load-privkey key.pem \
          --label "Mykey"
$ p11tool --login --write "pkcs11:URL" --load-certificate cert.pem \
          --label "Mykey"
@end example
Note that some tokens require the same label to be used for the certificate
and its corresponding private key.

To generate an RSA private key inside the token use:
@example
$ p11tool --login --generate-rsa --bits 1024 --label "MyNewKey" \
          --outfile MyNewKey.pub "pkcs11:TOKEN-URL"
@end example
The bits parameter in the above example is explicitly set because some
tokens only support limited choices in the bit length. The output file is the
corresponding public key. This key can be used to general a certificate
request with certtool.
@example
certtool --generate-request --load-privkey "pkcs11:KEY-URL" \
   --load-pubkey MyNewKey.pub --outfile request.pem
@end example
